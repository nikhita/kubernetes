// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by defaulter-gen. Do not edit it manually!

package v2alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/kubernetes/pkg/api/v1"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&CronJob{}, func(obj interface{}) { SetObjectDefaults_CronJob(obj.(*CronJob)) })
	scheme.AddTypeDefaultingFunc(&CronJobList{}, func(obj interface{}) { SetObjectDefaults_CronJobList(obj.(*CronJobList)) })
	scheme.AddTypeDefaultingFunc(&JobTemplate{}, func(obj interface{}) { SetObjectDefaults_JobTemplate(obj.(*JobTemplate)) })
	return nil
}

func SetObjectDefaults_CronJob(in *CronJob) {
	SetDefaults_CronJob(in)
	if in.ObjectMeta.CreationTimestamp.Time.loc != nil {
		for i := range in.ObjectMeta.CreationTimestamp.Time.loc.zone {
			a := &in.ObjectMeta.CreationTimestamp.Time.loc.zone[i]
		}
		for i := range in.ObjectMeta.CreationTimestamp.Time.loc.tx {
			a := &in.ObjectMeta.CreationTimestamp.Time.loc.tx[i]
		}
		if in.ObjectMeta.CreationTimestamp.Time.loc.cacheZone != nil {
		}
	}
	if in.ObjectMeta.DeletionTimestamp != nil {
	}
	if in.ObjectMeta.DeletionGracePeriodSeconds != nil {
	}
	for i := range in.ObjectMeta.OwnerReferences {
		a := &in.ObjectMeta.OwnerReferences[i]
		if a.Controller != nil {
		}
	}
	if in.ObjectMeta.Initializers != nil {
		for i := range in.ObjectMeta.Initializers.Pending {
			a := &in.ObjectMeta.Initializers.Pending[i]
		}
		if in.ObjectMeta.Initializers.Result != nil {
			if in.ObjectMeta.Initializers.Result.Details != nil {
				for i := range in.ObjectMeta.Initializers.Result.Details.Causes {
					a := &in.ObjectMeta.Initializers.Result.Details.Causes[i]
				}
			}
		}
	}
	for i := range in.ObjectMeta.Finalizers {
		a := &in.ObjectMeta.Finalizers[i]
	}
	if in.Spec.JobTemplate.Spec.Parallelism != nil {
	}
	if in.Spec.JobTemplate.Spec.Selector != nil {
		for i := range in.Spec.JobTemplate.Spec.Selector.MatchExpressions {
			a := &in.Spec.JobTemplate.Spec.Selector.MatchExpressions[i]
		}
	}
	v1.SetDefaults_PodSpec(&in.Spec.JobTemplate.Spec.Template.Spec)
	for i := range in.Spec.JobTemplate.Spec.Template.Spec.Volumes {
		a := &in.Spec.JobTemplate.Spec.Template.Spec.Volumes[i]
		v1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
		}
		if a.VolumeSource.EmptyDir != nil {
			if a.VolumeSource.EmptyDir.SizeLimit.d.Dec != nil {
			}
		}
		if a.VolumeSource.GCEPersistentDisk != nil {
		}
		if a.VolumeSource.AWSElasticBlockStore != nil {
		}
		if a.VolumeSource.GitRepo != nil {
		}
		if a.VolumeSource.Secret != nil {
			v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			for j := range a.VolumeSource.Secret.Items {
				b := &a.VolumeSource.Secret.Items[j]
			}
		}
		if a.VolumeSource.NFS != nil {
		}
		if a.VolumeSource.ISCSI != nil {
			v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.SecretRef != nil {
			}
		}
		if a.VolumeSource.Glusterfs != nil {
		}
		if a.VolumeSource.PersistentVolumeClaim != nil {
		}
		if a.VolumeSource.RBD != nil {
			v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
		}
		if a.VolumeSource.FlexVolume != nil {
		}
		if a.VolumeSource.Cinder != nil {
		}
		if a.VolumeSource.CephFS != nil {
		}
		if a.VolumeSource.Flocker != nil {
		}
		if a.VolumeSource.DownwardAPI != nil {
			v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
				}
				if b.ResourceFieldRef != nil {
				}
			}
		}
		if a.VolumeSource.FC != nil {
		}
		if a.VolumeSource.AzureFile != nil {
		}
		if a.VolumeSource.ConfigMap != nil {
			v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
		}
		if a.VolumeSource.VsphereVolume != nil {
		}
		if a.VolumeSource.Quobyte != nil {
		}
		if a.VolumeSource.AzureDisk != nil {
			v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode != nil {
			}
			if a.VolumeSource.AzureDisk.FSType != nil {
			}
			if a.VolumeSource.AzureDisk.Kind != nil {
			}
		}
		if a.VolumeSource.PhotonPersistentDisk != nil {
		}
		if a.VolumeSource.Projected != nil {
			v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.Secret != nil {
				}
				if b.DownwardAPI != nil {
				}
				if b.ConfigMap != nil {
				}
			}
		}
		if a.VolumeSource.PortworxVolume != nil {
		}
		if a.VolumeSource.ScaleIO != nil {
			v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
		}
	}
	for i := range in.Spec.JobTemplate.Spec.Template.Spec.InitContainers {
		a := &in.Spec.JobTemplate.Spec.Template.Spec.InitContainers[i]
		v1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			v1.SetDefaults_ContainerPort(b)
		}
		for j := range a.EnvFrom {
			b := &a.EnvFrom[j]
			if b.ConfigMapRef != nil {
			}
			if b.SecretRef != nil {
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.ConfigMapKeyRef != nil {
				}
				if b.ValueFrom.SecretKeyRef != nil {
				}
			}
		}
		v1.SetDefaults_ResourceList(&a.Resources.Limits)
		v1.SetDefaults_ResourceList(&a.Resources.Requests)
		for j := range a.VolumeMounts {
			b := &a.VolumeMounts[j]
		}
		if a.LivenessProbe != nil {
			v1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.Handler.Exec != nil {
			}
			if a.LivenessProbe.Handler.HTTPGet != nil {
				v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
				for j := range a.LivenessProbe.Handler.HTTPGet.HTTPHeaders {
					b := &a.LivenessProbe.Handler.HTTPGet.HTTPHeaders[j]
				}
			}
			if a.LivenessProbe.Handler.TCPSocket != nil {
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
			}
		}
		if a.SecurityContext != nil {
			if a.SecurityContext.Capabilities != nil {
				for j := range a.SecurityContext.Capabilities.Add {
					b := &a.SecurityContext.Capabilities.Add[j]
				}
			}
			if a.SecurityContext.SELinuxOptions != nil {
			}
			if a.SecurityContext.RunAsUser != nil {
			}
		}
	}
	if in.Spec.JobTemplate.Spec.Template.Spec.SecurityContext != nil {
		for i := range in.Spec.JobTemplate.Spec.Template.Spec.SecurityContext.SupplementalGroups {
			a := &in.Spec.JobTemplate.Spec.Template.Spec.SecurityContext.SupplementalGroups[i]
		}
		if in.Spec.JobTemplate.Spec.Template.Spec.SecurityContext.FSGroup != nil {
		}
	}
	for i := range in.Spec.JobTemplate.Spec.Template.Spec.ImagePullSecrets {
		a := &in.Spec.JobTemplate.Spec.Template.Spec.ImagePullSecrets[i]
	}
	if in.Spec.JobTemplate.Spec.Template.Spec.Affinity != nil {
		if in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity != nil {
			if in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution != nil {
				for i := range in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution.NodeSelectorTerms {
					a := &in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution.NodeSelectorTerms[i]
					for j := range a.MatchExpressions {
						b := &a.MatchExpressions[j]
					}
				}
			}
			for i := range in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution {
				a := &in.Spec.JobTemplate.Spec.Template.Spec.Affinity.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution[i]
			}
		}
		if in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAffinity != nil {
			for i := range in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution {
				a := &in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution[i]
			}
			for i := range in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution {
				a := &in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution[i]
			}
		}
		if in.Spec.JobTemplate.Spec.Template.Spec.Affinity.PodAntiAffinity != nil {
		}
	}
	for i := range in.Spec.JobTemplate.Spec.Template.Spec.Tolerations {
		a := &in.Spec.JobTemplate.Spec.Template.Spec.Tolerations[i]
	}
	for i := range in.Spec.JobTemplate.Spec.Template.Spec.HostAliases {
		a := &in.Spec.JobTemplate.Spec.Template.Spec.HostAliases[i]
	}
	for i := range in.Status.Active {
		a := &in.Status.Active[i]
	}
}

func SetObjectDefaults_CronJobList(in *CronJobList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_CronJob(a)
	}
}

func SetObjectDefaults_JobTemplate(in *JobTemplate) {
	if in.ObjectMeta.CreationTimestamp.Time.loc != nil {
		for i := range in.ObjectMeta.CreationTimestamp.Time.loc.zone {
			a := &in.ObjectMeta.CreationTimestamp.Time.loc.zone[i]
		}
		for i := range in.ObjectMeta.CreationTimestamp.Time.loc.tx {
			a := &in.ObjectMeta.CreationTimestamp.Time.loc.tx[i]
		}
		if in.ObjectMeta.CreationTimestamp.Time.loc.cacheZone != nil {
		}
	}
	if in.ObjectMeta.DeletionTimestamp != nil {
	}
	if in.ObjectMeta.DeletionGracePeriodSeconds != nil {
	}
	for i := range in.ObjectMeta.OwnerReferences {
		a := &in.ObjectMeta.OwnerReferences[i]
		if a.Controller != nil {
		}
	}
	if in.ObjectMeta.Initializers != nil {
		for i := range in.ObjectMeta.Initializers.Pending {
			a := &in.ObjectMeta.Initializers.Pending[i]
		}
		if in.ObjectMeta.Initializers.Result != nil {
			if in.ObjectMeta.Initializers.Result.Details != nil {
				for i := range in.ObjectMeta.Initializers.Result.Details.Causes {
					a := &in.ObjectMeta.Initializers.Result.Details.Causes[i]
				}
			}
		}
	}
	for i := range in.ObjectMeta.Finalizers {
		a := &in.ObjectMeta.Finalizers[i]
	}
	if in.Template.Spec.Parallelism != nil {
	}
	if in.Template.Spec.Selector != nil {
		for i := range in.Template.Spec.Selector.MatchExpressions {
			a := &in.Template.Spec.Selector.MatchExpressions[i]
		}
	}
	v1.SetDefaults_PodSpec(&in.Template.Spec.Template.Spec)
	for i := range in.Template.Spec.Template.Spec.Volumes {
		a := &in.Template.Spec.Template.Spec.Volumes[i]
		v1.SetDefaults_Volume(a)
		if a.VolumeSource.HostPath != nil {
		}
		if a.VolumeSource.EmptyDir != nil {
			if a.VolumeSource.EmptyDir.SizeLimit.d.Dec != nil {
			}
		}
		if a.VolumeSource.GCEPersistentDisk != nil {
		}
		if a.VolumeSource.AWSElasticBlockStore != nil {
		}
		if a.VolumeSource.GitRepo != nil {
		}
		if a.VolumeSource.Secret != nil {
			v1.SetDefaults_SecretVolumeSource(a.VolumeSource.Secret)
			for j := range a.VolumeSource.Secret.Items {
				b := &a.VolumeSource.Secret.Items[j]
			}
		}
		if a.VolumeSource.NFS != nil {
		}
		if a.VolumeSource.ISCSI != nil {
			v1.SetDefaults_ISCSIVolumeSource(a.VolumeSource.ISCSI)
			if a.VolumeSource.ISCSI.SecretRef != nil {
			}
		}
		if a.VolumeSource.Glusterfs != nil {
		}
		if a.VolumeSource.PersistentVolumeClaim != nil {
		}
		if a.VolumeSource.RBD != nil {
			v1.SetDefaults_RBDVolumeSource(a.VolumeSource.RBD)
		}
		if a.VolumeSource.FlexVolume != nil {
		}
		if a.VolumeSource.Cinder != nil {
		}
		if a.VolumeSource.CephFS != nil {
		}
		if a.VolumeSource.Flocker != nil {
		}
		if a.VolumeSource.DownwardAPI != nil {
			v1.SetDefaults_DownwardAPIVolumeSource(a.VolumeSource.DownwardAPI)
			for j := range a.VolumeSource.DownwardAPI.Items {
				b := &a.VolumeSource.DownwardAPI.Items[j]
				if b.FieldRef != nil {
					v1.SetDefaults_ObjectFieldSelector(b.FieldRef)
				}
				if b.ResourceFieldRef != nil {
				}
			}
		}
		if a.VolumeSource.FC != nil {
		}
		if a.VolumeSource.AzureFile != nil {
		}
		if a.VolumeSource.ConfigMap != nil {
			v1.SetDefaults_ConfigMapVolumeSource(a.VolumeSource.ConfigMap)
		}
		if a.VolumeSource.VsphereVolume != nil {
		}
		if a.VolumeSource.Quobyte != nil {
		}
		if a.VolumeSource.AzureDisk != nil {
			v1.SetDefaults_AzureDiskVolumeSource(a.VolumeSource.AzureDisk)
			if a.VolumeSource.AzureDisk.CachingMode != nil {
			}
			if a.VolumeSource.AzureDisk.FSType != nil {
			}
			if a.VolumeSource.AzureDisk.Kind != nil {
			}
		}
		if a.VolumeSource.PhotonPersistentDisk != nil {
		}
		if a.VolumeSource.Projected != nil {
			v1.SetDefaults_ProjectedVolumeSource(a.VolumeSource.Projected)
			for j := range a.VolumeSource.Projected.Sources {
				b := &a.VolumeSource.Projected.Sources[j]
				if b.Secret != nil {
				}
				if b.DownwardAPI != nil {
				}
				if b.ConfigMap != nil {
				}
			}
		}
		if a.VolumeSource.PortworxVolume != nil {
		}
		if a.VolumeSource.ScaleIO != nil {
			v1.SetDefaults_ScaleIOVolumeSource(a.VolumeSource.ScaleIO)
		}
	}
	for i := range in.Template.Spec.Template.Spec.InitContainers {
		a := &in.Template.Spec.Template.Spec.InitContainers[i]
		v1.SetDefaults_Container(a)
		for j := range a.Ports {
			b := &a.Ports[j]
			v1.SetDefaults_ContainerPort(b)
		}
		for j := range a.EnvFrom {
			b := &a.EnvFrom[j]
			if b.ConfigMapRef != nil {
			}
			if b.SecretRef != nil {
			}
		}
		for j := range a.Env {
			b := &a.Env[j]
			if b.ValueFrom != nil {
				if b.ValueFrom.ConfigMapKeyRef != nil {
				}
				if b.ValueFrom.SecretKeyRef != nil {
				}
			}
		}
		v1.SetDefaults_ResourceList(&a.Resources.Limits)
		v1.SetDefaults_ResourceList(&a.Resources.Requests)
		for j := range a.VolumeMounts {
			b := &a.VolumeMounts[j]
		}
		if a.LivenessProbe != nil {
			v1.SetDefaults_Probe(a.LivenessProbe)
			if a.LivenessProbe.Handler.Exec != nil {
			}
			if a.LivenessProbe.Handler.HTTPGet != nil {
				v1.SetDefaults_HTTPGetAction(a.LivenessProbe.Handler.HTTPGet)
				for j := range a.LivenessProbe.Handler.HTTPGet.HTTPHeaders {
					b := &a.LivenessProbe.Handler.HTTPGet.HTTPHeaders[j]
				}
			}
			if a.LivenessProbe.Handler.TCPSocket != nil {
			}
		}
		if a.Lifecycle != nil {
			if a.Lifecycle.PostStart != nil {
			}
		}
		if a.SecurityContext != nil {
			if a.SecurityContext.Capabilities != nil {
				for j := range a.SecurityContext.Capabilities.Add {
					b := &a.SecurityContext.Capabilities.Add[j]
				}
			}
			if a.SecurityContext.SELinuxOptions != nil {
			}
			if a.SecurityContext.RunAsUser != nil {
			}
		}
	}
	if in.Template.Spec.Template.Spec.SecurityContext != nil {
		for i := range in.Template.Spec.Template.Spec.SecurityContext.SupplementalGroups {
			a := &in.Template.Spec.Template.Spec.SecurityContext.SupplementalGroups[i]
		}
		if in.Template.Spec.Template.Spec.SecurityContext.FSGroup != nil {
		}
	}
	for i := range in.Template.Spec.Template.Spec.ImagePullSecrets {
		a := &in.Template.Spec.Template.Spec.ImagePullSecrets[i]
	}
	if in.Template.Spec.Template.Spec.Affinity != nil {
		if in.Template.Spec.Template.Spec.Affinity.NodeAffinity != nil {
			if in.Template.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution != nil {
				for i := range in.Template.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution.NodeSelectorTerms {
					a := &in.Template.Spec.Template.Spec.Affinity.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution.NodeSelectorTerms[i]
					for j := range a.MatchExpressions {
						b := &a.MatchExpressions[j]
					}
				}
			}
			for i := range in.Template.Spec.Template.Spec.Affinity.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution {
				a := &in.Template.Spec.Template.Spec.Affinity.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution[i]
			}
		}
		if in.Template.Spec.Template.Spec.Affinity.PodAffinity != nil {
			for i := range in.Template.Spec.Template.Spec.Affinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution {
				a := &in.Template.Spec.Template.Spec.Affinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution[i]
			}
			for i := range in.Template.Spec.Template.Spec.Affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution {
				a := &in.Template.Spec.Template.Spec.Affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution[i]
			}
		}
		if in.Template.Spec.Template.Spec.Affinity.PodAntiAffinity != nil {
		}
	}
	for i := range in.Template.Spec.Template.Spec.Tolerations {
		a := &in.Template.Spec.Template.Spec.Tolerations[i]
	}
	for i := range in.Template.Spec.Template.Spec.HostAliases {
		a := &in.Template.Spec.Template.Spec.HostAliases[i]
	}
}
